#!/usr/bin/env ruby

# Description: This script reads a yaml file and generates a waiver file based on the failed controls
# Usage: waiverfy.rb <filename> <waiverfile>
# Version: 1.8
# Author: Joshua Mazgelis
# Depends on: YAML, Ruby

# This Ruby version not yet tested.

require 'yaml'
require 'date'
require 'tempfile'
require 'fileutils'

puts "Welcome to the waiverfy script."
puts "This script will generate a waiver file based on the failed controls in a report."

if ARGV.length < 2
  puts "Usage: waiverfy.rb <filename> <waiverfile>"
  puts "Example: waiverfy.rb ./reports/report.yml ./waivers/waivers.yml"
  exit 1
end

reportfile = ARGV[0]
waiverfile = ARGV[1]

# Check if the report file exists

if !File.exist?(reportfile)
  puts "Report file does not exist."
else
  puts "Report file located."
end

# Open the report file and read the data

report_data = File.read(reportfile)

# Check if the report has any failed controls

puts "Checking #{reportfile} for failed controls..."

data = YAML.safe_load(File.read(reportfile))

failed_controls = false
data['profiles'].each do |profile|
  profile['controls'].each do |control|
    control['results'].each do |result|
      if result['status'] == 'failed'
        failed_controls = true
        break
      end
    end
    break if failed_controls
  end
  break if failed_controls
end

if !failed_controls
  puts "No failed controls found in the report. Exiting waiverfy script."
  exit 1
else
  puts "Failed controls found in the report."
end

puts "Preparing waiver file..."

# Check if the waivers directory exists, if not create it

waivers_dir = File.dirname(waiverfile)
if waivers_dir && !Dir.exist?(waivers_dir)
  FileUtils.mkdir_p(waivers_dir)
end

# Check if the waiver file already exists, if yes, prompt the user to overwrite it

if File.exist?(waiverfile)
  print "The waiver file already exists. Do you want to overwrite it? (y/n): "
  overwrite = gets.chomp
  if overwrite.downcase != 'y'
    puts "Exiting waiverfy script."
    exit 1
  end
end

# Prompt the user for the waiver expiration date

expiration_options = {
  '90 days' => Date.today + 90,
  '6 months' => Date.today >> 6,
  '12 months' => Date.today >> 12,
  '18 months' => Date.today >> 18,
  'custom date' => nil
}

puts "Choose the default waiver expiration date:"
expiration_options.keys.each_with_index do |option, index|
  puts "#{index + 1}. #{option}"
end

print "Enter the number corresponding to your choice [1]: "
choice = gets.chomp
choice = choice.empty? ? 0 : choice.to_i - 1

expiration_choice = expiration_options.keys[choice]

if expiration_choice == 'custom date'
  print "Enter the custom expiration date (YYYY-MM-DD): "
  custom_date = gets.chomp
  begin
    expiration_date = Date.strptime(custom_date, "%Y-%m-%d")
  rescue ArgumentError
    puts "Invalid date format. Attempting to fix..."
    begin
      expiration_date = Date.strptime(custom_date, "%m-%d-%Y")
      puts "Date format fixed."
    rescue ArgumentError
      puts "Unable to fix date format. Using default expiration date of 90 days."
      expiration_date = expiration_options['90 days']
    end
  end
else
  expiration_date = expiration_options[expiration_choice]
end

if expiration_date.nil?
  puts "Invalid expiration date. Using default expiration date of 90 days."
  expiration_date = expiration_options['90 days']
end

# Set the waiver justification string

justification = "Under review by security team"
puts "Default justification: \033[93m#{justification}\033[0m"
print "Do you want to update the justification? (y/n): "
update_justification = gets.chomp
if update_justification.downcase == 'y'
  print "Enter the new justification: "
  justification = gets.chomp
end

# Set the control test run state

print "Should InSpec run tests for waived controls? (y/n): "
run_tests = gets.chomp
if run_tests.downcase != 'n'
  run_tests = "yes"
  puts "InSpec will run tests for waived controls."
else
  run_tests = "no"
  puts "InSpec will not run tests for waived controls."
end

# Generate the waiver file

puts "Generating waivers based on #{reportfile}..."
# We will keep track of the number of waivers written
waiver_count = 0
profile_count = 0
control_count = 0
results_count = 0
results_count_failed = 0

data = YAML.safe_load(File.read(reportfile))

File.open(waiverfile, 'w') do |wf|
  wf.write("# This is an InSpec waiver file generated by the waiverfy script.\n")
  wf.write("# Originally generated from a report named: #{reportfile}\n\n")
  
  data['profiles'].each do |profile|
    profile_count += 1
    puts "Found Profile Name: #{profile['name']}"
    puts "Profile Title: #{profile['title']}"
    wf.write("# Found Profile Name: #{profile['name']}\n")
    wf.write("# Profile Title: #{profile['title']}\n\n")
    
    profile['controls'].each do |control|
      control_count += 1
      id = control['id']
      title = control['title']
      waivers_written = Set.new
      
      if control['results'].nil?
        puts "Warning: Control ID #{id} has no results."
        next
      end
      
      control['results'].each do |result|
        results_count += 1
        status = result['status']
        
        if status.nil?
          puts "Warning: Control ID #{id} has no status."
          next
        end
        
        puts "Control ID: #{id}, Status: #{status}"
        
        if status == 'failed'
          results_count_failed += 1
          
          if waivers_written.include?(id)
            puts "Waiver for Control ID: #{id} already written to #{waiverfile}"
            next
          end
          
          waivers_written.add(id)
          
          wf.write("# Control Title: #{title}\n")
          wf.write("#{id}:\n")
          wf.write("  expiration_date: #{expiration_date}\n")
          wf.write("  justification: #{justification}\n")
          wf.write("  run: #{run_tests}\n\n")
          
          puts "Waiver for Control ID: #{id} written to #{waiverfile}"
          waiver_count += 1
        end
      end
    end
  end
end

# Print the summary

puts
puts "Analyzed #{results_count} results across #{control_count} controls from #{profile_count} profiles."
puts "#{waiver_count} waivers created from #{results_count_failed} failed controls in the given report."
puts "Waiver file #{waiverfile} has been created."
puts "Thanks for using my waiverfy script!"
    
# End of waiverfy.rb script
